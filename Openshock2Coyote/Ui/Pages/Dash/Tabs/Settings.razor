@using openshock2coyote.Config
@using LucHeart.WebsocketLibrary
@using OpenShock.Desktop.ModuleBase
@using OpenShock.Desktop.ModuleBase.Api
@using openshock2coyote.Services
@using InTheHand.Bluetooth
@using OpenShock.Desktop.ModuleBase.Config
@using OpenShock.Serialization.Gateway
@implements IAsyncDisposable

@page "/dash/hub"

<MudPaper Outlined="true" Class="rounded-lg mud-paper-padding d-flex" Style="gap:16px; flex-direction: row">
    <div style="flex:1; display:flex; flex-direction:column; padding: 0; margin: 0">
        <MudExpansionPanels>
            <MudExpansionPanel Icon="@Icons.Material.Filled.Bluetooth" Expanded="true" Text="Coyote Connection">
                <div class="d-flex align-items-center gap-2">
                    <MudButton OnClick="StopCoyote" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Cancel" Color="Color.Primary">Stop</MudButton>
                    <MudButton Disabled="_disableButton" OnClick="FindCoyote" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Bluetooth" Color="Color.Primary" Class="flex-grow-1">Connect to Coyote</MudButton>
                </div>
                <MudProgressLinear Color="Color.Primary" Indeterminate="@_searching"/>
                <MudIcon Style="justify-content: center" Color="GetConnectionStateColor(FlowManager.CoyoteConnectionState.Value)" Icon="@Icons.Material.Filled.CheckCircle"></MudIcon>
                @_bluetoothSearchOutput
            </MudExpansionPanel>
            <MudExpansionPanel Icon="@Icons.Material.Filled.Hub" Text="Hub Settings (Needs configuration before use)">
                <MudDivider/>
                <br/>
                <MudText Color="Color.Error">It is recommended to create a new hub with 2 shockers on openshock.app</MudText>
                <span> 
                    <MudSelect T="Guid" Variant="Variant.Outlined" Label="Hub" @bind-Value="_selectedDevice" @bind-Value:after="SelectedDeviceChanged">
                        <MudSelectItem Value="Guid.Empty">None (Disable)</MudSelectItem>
                        @foreach (var device in OpenShockService.Data.Hubs.Value)
                        {
                            <MudSelectItem Value="@device.Id">@device.Name</MudSelectItem>
                        }
                    </MudSelect>
                </span>
                <div>
                    <MudIcon Color="GetConnectionStateColor(FlowManager.DeviceConnectionState.Value)" Icon="@Icons.Material.Filled.CheckCircle"></MudIcon>
                    @FlowManager.DeviceConnectionState.Value
                </div>

                <MudGrid Spacing="2">
                    @if (_selectedDevice != Guid.Empty)
                    {
                        <MudItem xs="6">
                            <MudSelect T="ushort" Variant="Variant.Outlined" Label="Channel A Shocker" @bind-Value="ModuleConfig.Config.Hub.ChannelAId" @bind-Value:after="OnSettingsValueChange">
                                @foreach (var shocker in OpenShockService.Data.Hubs.Value.First(hub => hub.Id == _selectedDevice).Shockers)
                                {
                                    <MudSelectItem Value="@shocker.RfId">@shocker.Name</MudSelectItem>
                                }
                                @if (!OpenShockService.Data.Hubs.Value
                                         .First(hub => hub.Id == _selectedDevice)
                                         .Shockers.Select(shocker => shocker.RfId)
                                         .Contains(ModuleConfig.Config.Hub.ChannelAId))
                                {
                                    <MudSelectItem Value="ModuleConfig.Config.Hub.ChannelAId">Select Shocker</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="6">
                            <MudSelect T="ushort" Variant="Variant.Outlined" Label="Channel B Shocker" @bind-Value="ModuleConfig.Config.Hub.ChannelBId" @bind-Value:after="OnSettingsValueChange">
                                @foreach (var shocker in OpenShockService.Data.Hubs.Value.First(hub => hub.Id == _selectedDevice).Shockers)
                                {
                                    <MudSelectItem Value="@shocker.RfId">@shocker.Name</MudSelectItem>
                                }
                                @if (!OpenShockService.Data.Hubs.Value
                                         .First(hub => hub.Id == _selectedDevice)
                                         .Shockers.Select(shocker => shocker.RfId)
                                         .Contains(ModuleConfig.Config.Hub.ChannelBId))
                                {
                                    <MudSelectItem Value="ModuleConfig.Config.Hub.ChannelBId">Select Shocker</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                    }
                </MudGrid>
            </MudExpansionPanel>
            <MudExpansionPanel Icon="@Icons.Material.Filled.Bolt" Text="Shock Settings">
                <MudDivider/>
                <MudGrid Spacing="2">
                    <MudItem xs="12">
                        <MudSlider T="int" Step="1" Value="@ModuleConfig.Config.CoyoteConfig.DutyCycle" 
                                   ValueChanged="value => {ModuleConfig.Config.CoyoteConfig.DutyCycle = value; ModuleConfig.SaveDeferred(); }"
                                   Min="10" Max="1000" Size="Size.Medium">Cycle time: @(ModuleConfig.Config.CoyoteConfig.DutyCycle)ms</MudSlider>
                    </MudItem>
                    <MudDivider/>
                    <MudItem xs="12">
                        <MudText>Increase to get the theoretical maximum of 200 Intensity (I hope, you know what you're doing)</MudText>
                    </MudItem>
                    <MudItem xs="12">
                        <MudSlider T="float" Size="Size.Large" Value="@ModuleConfig.Config.CoyoteConfig.ShockMultiplier" 
                                   ValueChanged="value => {ModuleConfig.Config.CoyoteConfig.ShockMultiplier = value; ModuleConfig.SaveDeferred(); }"  
                                   Min="0" Max="2" Step="0.01f">Shock Multiplier: @(MathF.Round(ModuleConfig.Config.CoyoteConfig.ShockMultiplier * 100))%</MudSlider>
                    </MudItem>
                    
                    <MudDivider/>
                    <MudItem xs="12">
                        <MudText>This simulates vibration by just giving you a lower intensity shock</MudText>
                    </MudItem>
                    <MudItem Style="align-content: center" xs="2">
                        <MudCheckBox @bind-Value="@ModuleConfig.Config.CoyoteConfig.Vibrate">Vibration</MudCheckBox>
                    </MudItem>
                    <MudItem xs="10">
                        <MudSlider T="float" Size="Size.Large" Value="@ModuleConfig.Config.CoyoteConfig.VibrateMultiplier" 
                                   ValueChanged="value => {ModuleConfig.Config.CoyoteConfig.VibrateMultiplier = value; ModuleConfig.SaveDeferred(); }" 
                                   Min="0" Max="2" Step="0.01f">Vibration Multiplier: @(MathF.Round(ModuleConfig.Config.CoyoteConfig.VibrateMultiplier * 100))%</MudSlider>
                    </MudItem>


                </MudGrid>
            </MudExpansionPanel>
        </MudExpansionPanels>
    </div>
    <MudPaper Outlined="true" Class="rounded-lg mud-paper-padding d-flex" Style="flex-direction: column; align-content: center">
        <MudProgressLinear Vertical="true" Rounded="true" Size="Size.Large" Value="@_batteryLevel" Color="GetBatteryPercentageColor(_batteryLevel)">
            <MudText Typo="Typo.subtitle1">
                <b>@_batteryLevel%</b>
            </MudText>
        </MudProgressLinear>
    </MudPaper>
    
    
</MudPaper>

@code {

    [ModuleInject] private IOpenShockService OpenShockService { get; set; } = null!;
    [ModuleInject] private FlowManager FlowManager { get; set; } = null!;
    [ModuleInject] private IModuleConfig<Openshock2CoyoteConfig> ModuleConfig { get; set; } = null!;
    
    private Guid _selectedDevice = Guid.Empty;
    private IAsyncDisposable _flowUpdatedSubscription = null!;
    private IAsyncDisposable _flowUpdatedBatteryLevel = null!;
    private IAsyncDisposable _flowUpdatedSubscriptionCoyote = null!;
    
    private string _bluetoothSearchOutput = "";
    private CancellationTokenSource _searchTokenSource = new();
    
    private bool _searching;
    private bool _disableButton;
    private byte _batteryLevel;
    
    
    protected override async Task OnInitializedAsync()
    {
        _bluetoothSearchOutput = FlowManager.CoyoteConnectionState.Value switch
        {
            WebsocketConnectionState.Connected => "Connected",
            WebsocketConnectionState.Connecting => "Connecting...",
            _ => "Click on Find Coyote to connect"
        };
        _selectedDevice = FlowManager.HubId;

        _batteryLevel = FlowManager.BatteryLevel.Value;
        _disableButton = FlowManager.CoyoteConnectionState.Value is WebsocketConnectionState.Connected or WebsocketConnectionState.Connecting;
        
        _flowUpdatedSubscription = await FlowManager.DeviceConnectionState.Updated.SubscribeAsync(state => InvokeAsync(StateHasChanged));
        _flowUpdatedSubscriptionCoyote = await FlowManager.CoyoteConnectionState.Updated.SubscribeAsync(state =>
        {
            _disableButton = state is WebsocketConnectionState.Connected or WebsocketConnectionState.Connecting;
            _bluetoothSearchOutput = FlowManager.CoyoteConnectionState.Value switch
            {
                WebsocketConnectionState.Connected => "Connected",
                WebsocketConnectionState.Connecting => "Connecting...",
                _ => "Click on Find Coyote to connect"
            };
            return InvokeAsync(StateHasChanged);
        });
        
        _flowUpdatedBatteryLevel = await FlowManager.BatteryLevel.Updated.SubscribeAsync(state =>
        {
            _batteryLevel = state;
            return InvokeAsync(StateHasChanged);
        });
        
        
    }

    private static Color GetBatteryPercentageColor(byte percentage) =>
        percentage switch
        {
            > 40 => Color.Success,
            > 20 => Color.Warning,
            _ => Color.Error
        };
    
    
    private static Color GetConnectionStateColor(WebsocketConnectionState state) =>
        state switch
        {
            WebsocketConnectionState.Connected => Color.Success,
            WebsocketConnectionState.Connecting => Color.Warning,
            WebsocketConnectionState.WaitingForReconnect => Color.Tertiary,
            _ => Color.Error
        };

    private async Task StopCoyote()
    {
        await _searchTokenSource.CancelAsync();
        await FlowManager.DisconnectCoyote();
        _searchTokenSource = new CancellationTokenSource();
        _searching = false;
    }

    private async Task FindCoyote()
    {
        var searchToken = _searchTokenSource.Token;
        _bluetoothSearchOutput = "Searching...";
        _searching = true;
        await FlowManager.ConnectCoyote();
        await Task.Delay(1000, searchToken);
        while (FlowManager.CoyoteConnectionState.Value == WebsocketConnectionState.Connecting)
        {
            searchToken.ThrowIfCancellationRequested();
            await Task.Delay(100, searchToken); 
        }
        searchToken.ThrowIfCancellationRequested();

        if (FlowManager.CoyoteConnectionState.Value == WebsocketConnectionState.Connected)
        {
            _searching = false;
            return;
        }
        _searching = false;
        var bluetoothDevices = await BluetoothService.GetBluetoothDevices(cancellationToken:searchToken);
        searchToken.ThrowIfCancellationRequested();
        try
        {
            _bluetoothSearchOutput = "Found a Coyote V3";
            var deviceId = bluetoothDevices.First(device => device.Name == "47L121000").Id;
            ModuleConfig.Config.CoyoteConfig.CoyoteAddress = deviceId;
            ModuleConfig.SaveDeferred();
            await FlowManager.ConnectCoyote();
        }
        catch (InvalidOperationException)
        {
            _bluetoothSearchOutput = "Couldn't find Coyote V3";
        }
    }
    
    private async Task SelectedDeviceChanged()
    {
        await FlowManager.SelectedDeviceChanged(_selectedDevice);
    }

    public async ValueTask DisposeAsync()
    {
        await _searchTokenSource.CancelAsync();
        _searchTokenSource.Dispose();
        await _flowUpdatedSubscription.DisposeAsync();
        await _flowUpdatedSubscriptionCoyote.DisposeAsync();
        await _flowUpdatedBatteryLevel.DisposeAsync();
    }
    
    private void OnSettingsValueChange()
    {
        ModuleConfig.SaveDeferred();
    }
}