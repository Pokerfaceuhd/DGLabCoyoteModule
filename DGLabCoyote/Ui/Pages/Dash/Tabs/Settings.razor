@using DGLabCoyote.Config
@using LucHeart.WebsocketLibrary
@using OpenShock.Desktop.ModuleBase
@using OpenShock.Desktop.ModuleBase.Api
@using DGLabCoyote.Services
@using InTheHand.Bluetooth
@using OpenShock.Desktop.ModuleBase.Config
@implements IAsyncDisposable

@page "/dash/hub"

<MudPaper Outlined="true" Class="rounded-lg mud-paper-padding d-flex" Style="display: flex; gap:16px;">
    <div style="flex:1; display:flex; flex-direction:column; padding: 0; margin: 0">
        <MudPaper Outlined="true" Class="rounded-lg mud-paper-padding-margin">
            <span>
                <MudSelect T="Guid" Variant="Variant.Outlined" Label="Hub" @bind-Value="_selectedDevice" @bind-Value:after="SelectedDeviceChanged">
                    <MudSelectItem Value="Guid.Empty">None (Disable)</MudSelectItem>
                    @foreach (var device in OpenShockService.Data.Hubs.Value)
                    {
                        <MudSelectItem Value="@device.Id">@device.Name</MudSelectItem>
                    }
                </MudSelect>

            </span>

            <div>
                <MudIcon Color="GetConnectionStateColor(FlowManager.DeviceConnectionState.Value)" Icon="@Icons.Material.Filled.CheckCircle"></MudIcon>
                @FlowManager.DeviceConnectionState.Value
            </div>
        </MudPaper>


        <MudPaper Outlined="true" Class="rounded-lg mud-paper-padding-margin">
            <MudTextField Class="option-width" Variant="Variant.Filled" @bind-Value="ModuleConfig.Config.Hub.ChannelAId" Label="Channel A Shocker Id" @bind-Value:after="OnSettingsValueChange"/>
            <MudTextField Class="option-width" Variant="Variant.Filled" @bind-Value="ModuleConfig.Config.Hub.ChannelBId" Label="Channel B Shocker Id" @bind-Value:after="OnSettingsValueChange"/>
        </MudPaper>

        <MudPaper Outlined="true" Class="rounded-lg mud-paper-padding d-flex" Style="position: relative; flex-direction: column">
            <MudButton Disabled="_disableButton" OnClick="FindCoyote" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Refresh" Color="Color.Primary">Find Coyote</MudButton>
            <MudProgressLinear Color="Color.Primary" Indeterminate="@_searching"/>

            @_bluetoothSearchOutput
            <br>
            <div>
                <MudIcon Color="GetConnectionStateColor(FlowManager.CoyoteConnectionState.Value)" Icon="@Icons.Material.Filled.CheckCircle"></MudIcon>
                @FlowManager.CoyoteConnectionState.Value
            </div>

            <MudSlider Step="1" Value="@_frequencySlider" Min="10" Max="1000" Size="Size.Medium" ValueChanged="@(EventCallback.Factory.Create<int>(this, OnSettingsValueChangeInt))">Frequency: @_frequencySlider</MudSlider>
        </MudPaper>
    </div>
    <MudPaper Outlined="true" Class="rounded-lg mud-paper-padding d-flex">
        <MudProgressLinear Vertical="true" Style="padding:4px; align-items:center; justify-content:center;" Rounded="true" Size="Size.Medium" Value="50" Color="Color.Error"/>
    </MudPaper>
</MudPaper>

@code {

    [ModuleInject] private IOpenShockService OpenShockService { get; set; } = null!;
    [ModuleInject] private FlowManager FlowManager { get; set; } = null!;
    [ModuleInject] private BluetoothService BluetoothService { get; set; } = null!;
    [ModuleInject] private IModuleConfig<DgLabCoyoteConfig> ModuleConfig { get; set; } = null!;
    
    private Guid _selectedDevice = Guid.Empty;
    private IAsyncDisposable _flowUpdatedSubscription = null!;
    private int _frequencySlider;
    
    private string _bluetoothSearchOutput = "Click on Find Coyote to connect";
    private readonly CancellationTokenSource _token = new();
    
    private bool _searching = false;
    private bool _disableButton = false;
    
    private IAsyncDisposable _flowUpdatedSubscriptionCoyote = null!;
    
    
    protected override async Task OnInitializedAsync()
    {
        _frequencySlider = ModuleConfig.Config.BluetoothConnection.FrequencyMs;
        _selectedDevice = FlowManager.HubId;
        
        _disableButton = FlowManager.CoyoteConnectionState.Value is WebsocketConnectionState.Connected or WebsocketConnectionState.Connecting;
        
        _flowUpdatedSubscription = await FlowManager.DeviceConnectionState.Updated.SubscribeAsync(state => InvokeAsync(StateHasChanged));
        _flowUpdatedSubscriptionCoyote = await FlowManager.CoyoteConnectionState.Updated.SubscribeAsync(state =>
        {
            _disableButton = state is WebsocketConnectionState.Connected or WebsocketConnectionState.Connecting;
            return InvokeAsync(StateHasChanged);
        });
    }
    
    private static Color GetConnectionStateColor(WebsocketConnectionState state) =>
        state switch
        {
            WebsocketConnectionState.Connected => Color.Success,
            WebsocketConnectionState.Connecting => Color.Warning,
            WebsocketConnectionState.WaitingForReconnect => Color.Tertiary,
            _ => Color.Error
        };
    
    private async Task FindCoyote()
    {
        _bluetoothSearchOutput = "Searching...";
        _searching = true;
        if (await BluetoothService.CheckDeviceAvailable(ModuleConfig.Config.BluetoothConnection.CoyoteAddress))
        {
            _searching = false;
            await FlowManager.ConnectCoyote();
        }
        
        var bluetoothDevices = await Bluetooth.ScanForDevicesAsync(cancellationToken:_token.Token);
        _searching = false;
        try
        {
            _bluetoothSearchOutput = "Found a Coyote V3";
            var deviceId = bluetoothDevices.First(device => device.Name == "47L121000").Id;
            ModuleConfig.Config.BluetoothConnection.CoyoteAddress = deviceId;
            ModuleConfig.SaveDeferred();
            await FlowManager.ConnectCoyote();
        }
        catch (InvalidOperationException)
        {
            _bluetoothSearchOutput = "Couldn't find Coyote V3";
        }
    }
    
    private async Task SelectedDeviceChanged()
    {
        await FlowManager.SelectedDeviceChanged(_selectedDevice);
    }

    public async ValueTask DisposeAsync()
    {
        await _flowUpdatedSubscription.DisposeAsync();
        await _flowUpdatedSubscriptionCoyote.DisposeAsync();
        await _token.CancelAsync();
    }
    
    private void OnSettingsValueChange()
    {
        ModuleConfig.SaveDeferred();
    }
    
    private void OnSettingsValueChangeInt(int i)
    {
        _frequencySlider = i;
        ModuleConfig.Config.BluetoothConnection.FrequencyMs = i;
        ModuleConfig.SaveDeferred();
    }
}