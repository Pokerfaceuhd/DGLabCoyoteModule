@using OpenShock.Desktop.ModuleBase
@using OpenShock.Desktop.ModuleBase.Config
@using DGLabCoyote.Config
@using DGLabCoyote.Services
@using InTheHand.Bluetooth
@using LucHeart.WebsocketLibrary
@implements IAsyncDisposable

@page "/dash/coyote"

<MudPaper Outlined="true" Class="rounded-lg mud-paper-padding d-flex" Style="position: relative; flex-direction: column">
    
    <MudButton OnClick="FindCoyote" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Refresh" Color="Color.Primary" Style="margin-right: 10px;">Find Coyote</MudButton>
    
    <MudIcon Color="GetConnectionStateColor(FlowManager.DeviceConnectionState.Value)" Icon="@Icons.Material.Filled.CheckCircle"></MudIcon>
    @FlowManager.DeviceConnectionState.Value
    
</MudPaper>
@code {
    [ModuleInject] private FlowManager FlowManager { get; set; } = null!;
    [ModuleInject] private BluetoothService BluetoothService{ get; set; } = null!;
    [ModuleInject] private IModuleConfig<DgLabCoyoteConfig> ModuleConfig { get; set; } = null!;

    private string? _selectedBluetoothDevice;
    
    private IReadOnlyCollection<BluetoothDevice> _bluetoothDevices = new List<BluetoothDevice>();
    private IAsyncDisposable _flowUpdatedSubscription = null!;

    
    protected override async Task OnInitializedAsync()
    {
        _selectedBluetoothDevice = ModuleConfig.Config.BluetoothConnection.CoyoteAddress;
        
        _flowUpdatedSubscription = await FlowManager.CoyoteConnectionState.Updated.SubscribeAsync(state => InvokeAsync(StateHasChanged));
    }
    
    private async Task FindCoyote()
    {
        _bluetoothDevices = await BluetoothService.GetBluetoothDevices();
    }
    
    private static Color GetConnectionStateColor(WebsocketConnectionState state) =>
        state switch
        {
            WebsocketConnectionState.Connected => Color.Success,
            WebsocketConnectionState.Connecting => Color.Warning,
            WebsocketConnectionState.WaitingForReconnect => Color.Tertiary,
            _ => Color.Error
        };
    
    private async Task SelectedBluetoothDeviceChanged()
    {
        
    }
    
    public async ValueTask DisposeAsync()
    {

    }
    
    private void OnSettingsValueChange()
    {
        ModuleConfig.SaveDeferred();
    }
}

