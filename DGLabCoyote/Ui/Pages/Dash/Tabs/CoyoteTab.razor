@using OpenShock.Desktop.ModuleBase
@using OpenShock.Desktop.ModuleBase.Config
@using DGLabCoyote.Config
@using DGLabCoyote.Services
@using InTheHand.Bluetooth
@using LucHeart.WebsocketLibrary
@implements IAsyncDisposable

@page "/dash/coyote"

<MudPaper Outlined="true" Class="rounded-lg mud-paper-padding d-flex" Style="position: relative; flex-direction: column">
    <MudButton Disabled="@_searching" OnClick="FindCoyote" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Refresh" Color="Color.Primary">Find Coyote</MudButton>
    <MudProgressLinear Color="Color.Primary" Indeterminate="@_searching"/>
    
    @_bluetoothOutput
    
    <br>
    <div>
        <MudIcon Color="GetConnectionStateColor(FlowManager.CoyoteConnectionState.Value)" Icon="@Icons.Material.Filled.CheckCircle"></MudIcon>
        @FlowManager.CoyoteConnectionState.Value
    </div>
    
</MudPaper>
@code {
    [ModuleInject] private FlowManager FlowManager { get; set; } = null!;
    [ModuleInject] private BluetoothService BluetoothService { get; set; } = null!;
    [ModuleInject] private IModuleConfig<DgLabCoyoteConfig> ModuleConfig { get; set; } = null!;
    
    private string _bluetoothOutput = "Click on Find Coyote to connect";
    
    CancellationTokenSource _token = new();
    
    private Boolean _searching = false;
    
    private IReadOnlyCollection<BluetoothDevice> _bluetoothDevices = new List<BluetoothDevice>();
    private IAsyncDisposable _flowUpdatedSubscription = null!;

    
    protected override async Task OnInitializedAsync()
    {
        _flowUpdatedSubscription = await FlowManager.CoyoteConnectionState.Updated.SubscribeAsync(state => InvokeAsync(StateHasChanged));
    }
    
    private async Task FindCoyote()
    {
        _bluetoothOutput = "Searching...";
        _searching = true;
        _bluetoothDevices = await BluetoothService.GetBluetoothDevices(_token.Token);
        _searching = false;
        try
        {
            _bluetoothOutput = "Found a Coyote V3";
            await FlowManager.ConnectCoyote(_bluetoothDevices.First(device => device.Name == "47L121000").Id);
        }
        catch (InvalidOperationException)
        {
            _bluetoothOutput = "Couldnt find Coyote V3";
        }
    }
    
    private static Color GetConnectionStateColor(WebsocketConnectionState state) =>
        state switch
        {
            WebsocketConnectionState.Connected => Color.Success,
            WebsocketConnectionState.Connecting => Color.Warning,
            WebsocketConnectionState.WaitingForReconnect => Color.Tertiary,
            _ => Color.Error
        };
    
    public async ValueTask DisposeAsync()
    {
        await _token.CancelAsync();
    }
    
    private void OnSettingsValueChange()
    {
        ModuleConfig.SaveDeferred();
    }
}

