@inject ILogger<HubTab> Logger
@using DGLabCoyote.Config
@using LucHeart.WebsocketLibrary
@using Microsoft.Extensions.Logging
@using OpenShock.Desktop.ModuleBase
@using OpenShock.Desktop.ModuleBase.Api
@using DGLabCoyote.Services
@using OpenShock.Desktop.ModuleBase.Config
@using OpenShock.SDK.CSharp.Live.LiveControlModels
@implements IAsyncDisposable

@page "/dash/hub"

<MudPaper Outlined="true" Class="rounded-lg mud-paper-padding d-flex" Style="position: relative; flex-direction: column">

    <span>
    
        <MudSelect T="Guid" Variant="Variant.Outlined" Label="Hub" @bind-Value="_selectedDevice" @bind-Value:after="SelectedDeviceChanged">
            <MudSelectItem Value="Guid.Empty">None (Disable)</MudSelectItem>
            @foreach (var port in OpenShockService.Data.Hubs.Value)
            {
                <MudSelectItem Value="@port.Id">@port.Name</MudSelectItem>
            }
        </MudSelect>
        
    </span>
    

    <div>
        <MudIcon Color="GetConnectionStateColor(FlowManager.DeviceConnectionState.Value)" Icon="@Icons.Material.Filled.CheckCircle"></MudIcon>
        @FlowManager.DeviceConnectionState.Value
    </div>

    <MudPaper Outlined="true" Class="rounded-lg mud-paper-padding-margin">
        <MudTextField Class="option-width" Variant="Variant.Filled" @bind-Value="ModuleConfig.Config.Hub.ChannelAId" Label="Channel A Shocker Id" @bind-Value:after="OnSettingsValueChange"/>
        <MudTextField Class="option-width" Variant="Variant.Filled" @bind-Value="ModuleConfig.Config.Hub.ChannelBId" Label="Channel B Shocker Id" @bind-Value:after="OnSettingsValueChange"/>
    </MudPaper>
</MudPaper>

@code {

    [ModuleInject] private IOpenShockService OpenShockService { get; set; } = null!;
    [ModuleInject] private FlowManager FlowManager { get; set; } = null!;
    [ModuleInject] private IModuleConfig<DgLabCoyoteConfig> ModuleConfig { get; set; } = null!;
    
    private Guid _selectedDevice = Guid.Empty;
    private IAsyncDisposable _flowUpdatedSubscription = null!;

    protected override async Task OnInitializedAsync()
    {
        _selectedDevice = FlowManager.HubId;

        _flowUpdatedSubscription = await FlowManager.DeviceConnectionState.Updated.SubscribeAsync(state => InvokeAsync(StateHasChanged));
    }

    private static Color GetConnectionStateColor(WebsocketConnectionState state) =>
        state switch
        {
            WebsocketConnectionState.Connected => Color.Success,
            WebsocketConnectionState.Connecting => Color.Warning,
            WebsocketConnectionState.WaitingForReconnect => Color.Tertiary,
            _ => Color.Error
        };

    private async Task SelectedDeviceChanged()
    {
        await FlowManager.SelectedDeviceChanged(_selectedDevice);
    }

    public async ValueTask DisposeAsync()
    {
        await _flowUpdatedSubscription.DisposeAsync();
    }
    
    private void OnSettingsValueChange()
    {
        ModuleConfig.SaveDeferred();
    }
}